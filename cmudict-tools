#!/usr/bin/python
#
# Tool for processing the CMU Pronunciation Dictionary file formats.
#
# Copyright (C) 2015 Reece H. Dunn
#
# This file is part of cmudict-tools.
#
# cmudict-tools is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# cmudict-tools is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with cmudict-tools.  If not, see <http://www.gnu.org/licenses/>.

from __future__ import print_function

import cmudict
import sys
import argparse

class HelpWarningsAction(argparse.Action):
	def __init__(self, option_strings, dest):
		super(HelpWarningsAction, self).__init__(option_strings=option_strings, dest=dest, nargs=0)

	def __call__(self, parser, namespace, values, option_string=None):
		print('The following values are available for -W:')
		print()
		for warning, help in sorted(cmudict.parser_warnings.items()):
			print('{0: <25}{1}'.format(warning, help))
		print()
		print('If -Wwarn is used, the option is enabled. If -Wno-warn is used, the option')
		print('is disabled.')
		print()
		print('The following values have a special behaviour, and cannot be used with the')
		print('`no-` prefix:')
		print()
		print('{0: <25}{1}'.format('all', 'enable all warnings'))
		print('{0: <25}{1}'.format('none', 'disable all warnings'))
		print()
		print('The order is important, as the warning set is tracked incrementally. This')
		print('allows the following combinations:')
		print()
		print('    -Wnone -Winvalid-phonemes')
		print('        Only use the invalid-phonemes warning.')
		print()
		print('    -Wall -Wno-missing-stress')
		print('        Use all warnings except missing-stress.')
		sys.exit(0)

def parse(args):
	parser = cmudict.parse(args.filename, warnings=args.warnings, order_from=args.order_from, accent=args.accent)
	if args.sort:
		return cmudict.sort(parser, args.sort)
	return parser

def print_dict(args):
	cmudict.format(args.format, parse(args), accent=args.accent)

def debug(args):
	for entry in parse(args):
		print(entry)

def validate(args):
	for word, context, phonemes, comment, error in parse(args):
		if error:
			print(error, file=sys.stderr)

commands = {
	'debug':    debug,
	'validate': validate,
	'print':    print_dict,
}

parser = argparse.ArgumentParser(description='A helper program for working with the CMU Pronunciation Dictionary.')
parser.add_argument('-W', dest='warnings', action='append', default=[])
parser.add_argument('--accent', default=None, choices=cmudict.accents.keys())
parser.add_argument('--format', default='cmudict', choices=cmudict.dict_formats.keys())
parser.add_argument('--sort', default=None, choices=['weide', 'air'])
parser.add_argument('--order-from', default=0, type=int)
parser.add_argument('--help-warnings', action=HelpWarningsAction)
parser.add_argument('command', choices=commands.keys())
parser.add_argument('filename')
args = parser.parse_args()

try:
	commands[args.command](args)
except ValueError, e:
	print(e)
